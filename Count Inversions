#include <bits/stdc++.h>
void merge(int l,int m,int h,long long *arr,long long &ans)
{
    int n1=m-l+1;
    int n2=h-m;
    long long left[n1];
    long long right[n2];
    
    for(int i=0;i<n1;i++)
        left[i]=arr[i+l];
    for(int i=0;i<n2;i++)
        right[i]=arr[i+m+1];
    int i=0,j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(left[i]<=right[j])
            arr[k++]=left[i++];
        else
            ans+=n1-i,arr[k++]=right[j++];
    }
    while(i<n1)
        arr[k++]=left[i++];
    while(j<n2)
        arr[k++]=right[j++];
}

void mergesort(int low,int high,long long *arr,long long &ans)
{
    if(low<high)
    {
        int mid=low+(high-low)/2;
        mergesort(low,mid,arr,ans);
        mergesort(mid+1,high,arr,ans);
        merge(low,mid,high,arr,ans);
    }
}

long long getInversions(long long *arr, int n){
    long long ans=0;
    mergesort(0,n-1,arr,ans);
    return ans;
}
