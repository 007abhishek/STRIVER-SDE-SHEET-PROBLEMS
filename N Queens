bool isSafe(int r,int c,int n, vector<vector<int> > &board)
{
    for(int i=0;i<n;i++)
        if(board[i][c])
            return false;
    for(int i=0;i<n;i++)
        if(board[r][i])
            return false;
    for(int i=r,j=c;i>=0&&j>=0;i--,j--)
        if(board[i][j])
            return false;
    for(int i=r,j=c;i<n&&j>=0;i++,j--)
        if(board[i][j])
            return false;
    return true;
}
void solve(int c,int n, vector<vector<int> > &board,vector<vector<int> >&ans)
{
    if(c==n)
    {
        vector<int> temp;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                temp.push_back(board[i][j]);
        ans.push_back(temp);
        return ;
    }
    for(int i=0;i<n;i++)
    {
        if(isSafe(i,c,n,board))
        {
            board[i][c]=1;
            solve(c+1,n,board,ans);
            board[i][c]=0;
        }
    }
}
vector<vector<int>> solveNQueens(int n) {
    vector<vector<int> > board(n,vector<int> (n,0));
    vector<vector<int> >ans;
    solve(0,n,board,ans);
    
    return ans;
}
