/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
#include<stack>
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    stack<BinaryTreeNode<int> *> st1,st2;
    BinaryTreeNode<int> *temp=root;
    while(root)
        st1.push(root),root=root->left;
    while(temp)
        st2.push(temp),temp=temp->right;
    
    while(!st1.empty() && !st2.empty() && (st1.top()->data<=st2.top()->data))
    {
        BinaryTreeNode<int> *l,*r;
        l=st1.top();
        r=st2.top();
        if(l->data+r->data==k)
            return true;
        else if(l->data+r->data>k)
        {
            st2.pop();
            r=r->left;
            while(r)
                st2.push(r),r=r->right;
        }
        else
        {
            st1.pop();
            l=l->right;
            while(l)
                st1.push(l),l=l->left;
        }
    }
    return false;
}
