/*************************************************************

    Following is the Binary Tree node structure

    template <typename T>

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/
void inorder(BinaryTreeNode<int> *root,vector<int>&v)
{
    if(root==NULL)
        return;
    inorder(root->left,v);
    v.push_back(root->data);
    inorder(root->right,v);    
}

pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key)
{
    pair<int,int> p={-1,-1};
    vector<int> v;
    inorder(root,v);
    int n=v.size();
    for(int i=0;i<n;i++)
    {
        if(v[i]==key)
        {
            if(i-1>=0)
                p.first=v[i-1];
            if(i+1<n)
                p.second=v[i+1];
            break;
        }
    }
    return p;
}



----------------------------------------------------------------------------------------------------




/*************************************************************

    Following is the Binary Tree node structure

    template <typename T>

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/
void inorder(BinaryTreeNode<int> *root,vector<int>&v)
{
    if(root==NULL)
        return;
    inorder(root->left,v);
    v.push_back(root->data);
    inorder(root->right,v);    
}

pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key)
{
    int p=-1,s=-1;
    while(root)
    {
        if(root->data==key)
            break;
        if(root->data>key)
            s=root->data,root=root->left;
        else
            p=root->data,root=root->right;
    }
    BinaryTreeNode<int>* pre=root->left;
    BinaryTreeNode<int>* succ=root->right;
    if(pre)
    {
        p=pre->data;
        while(pre->right)
            pre=pre->right,p=pre->data;
    }
    if(succ)
    {
        s=succ->data;
        while(succ->left)
            succ=succ->left,s=succ->data;
    }
    return {p,s};
}






