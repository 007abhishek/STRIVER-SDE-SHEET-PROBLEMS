void DFS(int i,int j,int n,vector<vector<int> > &maze,vector<vector<int> > &ans,vector<vector<bool>> &visited)
{
    visited[i][j]=true;
    if(i==n && j==n)
    {
        vector<int> temp;
        for(int i=0;i<=n;i++)
            for(int j=0;j<=n;j++)
                temp.push_back(visited[i][j]);
        
        ans.push_back(temp);
        visited[i][j]=false;
        return;
    }
    if(i+1<=n && maze[i+1][j]==1 && visited[i+1][j]==false)
        DFS(i+1,j,n,maze,ans,visited);
    if(j+1<=n && maze[i][j+1]==1 && visited[i][j+1]==false)
        DFS(i,j+1,n,maze,ans,visited);
    if(i-1>=0 && maze[i-1][j]==1 && visited[i-1][j]==false)
        DFS(i-1,j,n,maze,ans,visited);
    if(j-1>=0 && maze[i][j-1]==1 && visited[i][j-1]==false)
        DFS(i,j-1,n,maze,ans,visited);
    
    visited[i][j]=false;
}


vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
    vector<vector<int> > ans;
    vector<vector<bool> > visited(n,vector<bool>(n,false));
    DFS(0,0,n-1,maze,ans,visited);
    return ans;
}
